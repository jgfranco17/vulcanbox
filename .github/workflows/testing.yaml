name: Pytest & Coverage

on:
  push:
    branches:
      - main
      - "feature/**"
  pull_request:
    branches:
      - main

jobs:
  run-pytest:
    runs-on: ubuntu-latest

    env:
      GITHUB_USERNAME: ${{ secrets.PROJECT_GITHUB_USERNAME }}
      GITHUB_API_TOKEN: ${{ secrets.PROJECT_GITHUB_API_TOKEN }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Just
        uses: extractions/setup-just@v2

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies
        run: |
          poetry install

      - name: Run tests verbose
        run: |
          just pytest -vv

  run-coverage:
    runs-on: ubuntu-latest

    env:
      GITHUB_USERNAME: ${{ secrets.PROJECT_GITHUB_USERNAME }}
      GITHUB_API_TOKEN: ${{ secrets.PROJECT_GITHUB_API_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Run coverage
        run: |
          poetry run coverage run --source=vulcanbox --omit="*/__*.py,*/test_*.py" -m pytest

      - name: Generate report
        shell: bash
        run: |
          COVERAGE_FILE="coverage_report.txt"
          echo "COVERAGE_FILE=$COVERAGE_FILE" >> $GITHUB_ENV
          poetry run coverage report -m > "$COVERAGE_FILE"

          # Check if the file exists
          if [[ ! -f "$COVERAGE_FILE" ]]; then
              echo "Coverage report file not found!"
              exit 1
          fi

          TOTAL_COVERAGE=$(grep "^TOTAL" "$COVERAGE_FILE" | awk '{print $NF}')

          if [[ -z "$TOTAL_COVERAGE" ]]; then
              echo "Could not parse total coverage!"
              exit 1
          fi
          echo "TOTAL_COVERAGE=$TOTAL_COVERAGE" >> $GITHUB_ENV

      - name: Create GHA job summary
        if: always()
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          echo "## Test Coverage Report [${{ env.TOTAL_COVERAGE }}]" >> $GITHUB_STEP_SUMMARY
          echo "**${TIMESTAMP}**" >> $GITHUB_STEP_SUMMARY
          echo '```shell' >> $GITHUB_STEP_SUMMARY
          cat ${{ env.COVERAGE_FILE }} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
